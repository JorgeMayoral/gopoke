// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"sync"

	gopoke "github.com/JorgeMayoral/gopoke/src/internal"
)

// Ensure, that PokemonRepoMock does implement PokemonRepo.
// If this is not the case, regenerate this file with moq.
var _ gopoke.PokemonRepo = &PokemonRepoMock{}

// PokemonRepoMock is a mock implementation of PokemonRepo.
//
// 	func TestSomethingThatUsesPokemonRepo(t *testing.T) {
//
// 		// make and configure a mocked PokemonRepo
// 		mockedPokemonRepo := &PokemonRepoMock{
// 			GetPokemonByIdFunc: func(pokemonID int) (Pokemon, error) {
// 				panic("mock out the GetPokemonById method")
// 			},
// 			GetPokemonsFunc: func(limit int, offset int) ([]PokemonSimple, error) {
// 				panic("mock out the GetPokemons method")
// 			},
// 		}
//
// 		// use mockedPokemonRepo in code that requires PokemonRepo
// 		// and then make assertions.
//
// 	}
type PokemonRepoMock struct {
	// GetPokemonByIdFunc mocks the GetPokemonById method.
	GetPokemonByIdFunc func(pokemonID int) (gopoke.Pokemon, error)

	// GetPokemonsFunc mocks the GetPokemons method.
	GetPokemonsFunc func(limit int, offset int) ([]gopoke.PokemonSimple, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPokemonById holds details about calls to the GetPokemonById method.
		GetPokemonById []struct {
			// PokemonID is the pokemonID argument value.
			PokemonID int
		}
		// GetPokemons holds details about calls to the GetPokemons method.
		GetPokemons []struct {
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
	}
	lockGetPokemonById sync.RWMutex
	lockGetPokemons    sync.RWMutex
}

// GetPokemonById calls GetPokemonByIdFunc.
func (mock *PokemonRepoMock) GetPokemonById(pokemonID int) (gopoke.Pokemon, error) {
	if mock.GetPokemonByIdFunc == nil {
		panic("PokemonRepoMock.GetPokemonByIdFunc: method is nil but PokemonRepo.GetPokemonById was just called")
	}
	callInfo := struct {
		PokemonID int
	}{
		PokemonID: pokemonID,
	}
	mock.lockGetPokemonById.Lock()
	mock.calls.GetPokemonById = append(mock.calls.GetPokemonById, callInfo)
	mock.lockGetPokemonById.Unlock()
	return mock.GetPokemonByIdFunc(pokemonID)
}

// GetPokemonByIdCalls gets all the calls that were made to GetPokemonById.
// Check the length with:
//     len(mockedPokemonRepo.GetPokemonByIdCalls())
func (mock *PokemonRepoMock) GetPokemonByIdCalls() []struct {
	PokemonID int
} {
	var calls []struct {
		PokemonID int
	}
	mock.lockGetPokemonById.RLock()
	calls = mock.calls.GetPokemonById
	mock.lockGetPokemonById.RUnlock()
	return calls
}

// GetPokemons calls GetPokemonsFunc.
func (mock *PokemonRepoMock) GetPokemons(limit int, offset int) ([]gopoke.PokemonSimple, error) {
	if mock.GetPokemonsFunc == nil {
		panic("PokemonRepoMock.GetPokemonsFunc: method is nil but PokemonRepo.GetPokemons was just called")
	}
	callInfo := struct {
		Limit  int
		Offset int
	}{
		Limit:  limit,
		Offset: offset,
	}
	mock.lockGetPokemons.Lock()
	mock.calls.GetPokemons = append(mock.calls.GetPokemons, callInfo)
	mock.lockGetPokemons.Unlock()
	return mock.GetPokemonsFunc(limit, offset)
}

// GetPokemonsCalls gets all the calls that were made to GetPokemons.
// Check the length with:
//     len(mockedPokemonRepo.GetPokemonsCalls())
func (mock *PokemonRepoMock) GetPokemonsCalls() []struct {
	Limit  int
	Offset int
} {
	var calls []struct {
		Limit  int
		Offset int
	}
	mock.lockGetPokemons.RLock()
	calls = mock.calls.GetPokemons
	mock.lockGetPokemons.RUnlock()
	return calls
}
